import React, { useState, FormEvent } from 'react';
// Importamos "FiChevronRight" depois de instalar "yarn add react-icons"
import { FiChevronRight } from 'react-icons/fi'
import api from '../../services/api';

import logoImage from '../../assets/logo.svg';
import Repository from '../Repository';

import { Tytle, Form, Repositories, Error } from './styles';

// Important√≠ssimo: Sempre que criarmos um estado"useState" que n√£o √© um valor padr√£o(ex.: array, string, booleano, n√∫mero) √© muito importante definir o tipo desse useState. para que depois quando a gente for utilizar a vari√°vel repositories a gente saiba o que √© que tem l√° dentro. Para isso criamos a interface Repository.
interface Repository {
    // Aqui, colocamos a tipagem somente de informa√ß√µes que vamos utilizar na nossa interface
    // No caso do nosso reposit√≥rio(https://api.github.com/repos/Rocketseat/unform) vamos precisar de:
    full_name: string;
    description: string;
    owner: {
        login: string;
        avatar_url: string;
    };
}

/* ESTA √â A ROTA PRINCIPAL DA APLICA√á√ÉO*/

// Vamos criar a nossa componente "Dashboard"
// Poderiamos ter feito "const Dashboar() {} " mas vamos utilizar o formato logo abaixo porque facilita o uso da tipagem j√° que estamos lidando tamb√©m com typescript.
/* Para os componentes do React, vamos utilizar sempo "React.FC" que √© a abrevia√ß√£o de React.FunctionComponent ou seja componente escrito no formato de fun√ß√£o*/
const Dashboard: React.FC = () => {
    // Cria√ß√£o de estado que vai controlar o erro
    const [ inputError, setInputError ] = useState('');

    // Criamos estado s√≥ para armazenar o valor de input(newRepo) e a fun√ß√£o "setNewRepo" para alterar o valor de estado.
    const [ newRepo, setNewRepo ] = useState('');

    // Estado que vai armazenar o meu repositorio. Icializamos o estado com valor vazio"useState([])"
    // "repositories" √© o valor do estado em si; "setRepositories" √© a vari√°vel que useremos toda vez que a gente quer mudar o valor do estado
    const [repositories, setRepositories] = useState<Repository[]>([]);

    // Cria√ß√£o da fun√ß√£o para lidar com a adi√ß√£o de novos repositorios aqui dentro
    // Quando submetimos um Form, o HTML ternta nos redirecionar para uma outra p√°gina. O que podemos fazer aqui √© colocar "event" como retorno de  "handleAddRepository".
    // "HTMLFormElement" representa elemento HTML do Form
    // "FormEvent" representa o evento do submit do formulario
    async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {
        event.preventDefault();
        // console.log(newRepo);

        // Verificando se o conte√∫do da vari√°vel "newRepo" est√° vazio
        if (!newRepo) {
            // Se estiver vazio, ent√£o essa √© a mensagem que ser√° mostrada
            setInputError('Digite o autor/nome do reposit√≥rio.üôÑ');
            return;
        }

        // Mensagem de erro quando acontecer algo
        try {
            // O que vamos fazer aqui? . Vamos ter que ir at√© api do github; buscar os dados daquele reposit√≥rio; e depois salvar novo reposit√≥rio no estado. Resumindo:
            // Adi√ß√£o de um novo repositorio
            // Consumir API do Github - buscar os dados daquele reposit√≥rio
            // Salvar novo repositorio no estado

            // Chamando a nossa "api". Dentro do get() vai a rota(repos/) e o texto que est√° digitado dentro do input(newRepo)
            const response = await api.get<Repository>(`repos/${newRepo}`);
            // Pegando o reposit√≥rio
            const repository = response.data;
            // Agora podemos utilizar esse API para preencher o nosso array de reposit√≥rio
            // Respeitando o conceito de imutabilidade, como queremos s√≥ adicionar o reposit√≥rio(repository) que acabamos de pegar/buscar no final da nossa lista, precisamos copiar a lista toda(...repositories) para n√£o perder os dados que j√° temos l√° dendro e colocar o repositorio(repository) no final.
            setRepositories([...repositories, repository]);
            // Para limpar o input fazemos, pegamos o "setNewRepo" e inicializamos o seu valor.
            setNewRepo('');
            // Se der tudo certo, ent√£o vou dar um "setInputError" de volta
            setInputError('');
        } catch (err) {
            // Se o autor/nome do reposit√≥rio estiver errado,ou seja, se o "await api.get" falhar, ent√£o esta √© a mensagem que ser√° mostrada
            setInputError('O autor/nome do reposit√≥rio n√£o est√° correto.üò•');
        }

    }

    // Aqui dentro vamos retornar o nosso JSX
    return (
        <>
            <img src={logoImage} alt="Github Explorer" />
            <Tytle>Explore reposit√≥rios no Github.</Tytle>

            {/* Fazendo o input e o button */}
            {/* Toda vez que acontecer um submit nesse formul√°rio, a fun√ß√£o "handleAddRepository" ser√° chamada*/}
            <Form hasError={!!inputError} onSubmit={handleAddRepository} >
                <input
                    value={newRepo} /* Porque √© o texto que esse input vai ter */
                    // Quando o usu√°rio altera o valor desse input eu vou receber um evento(e)
                    // Dentro desse evento(e) eu tenho o valor de input dispon√≠vel atrav√©s de "e.target.value"
                    onChange={(e) => setNewRepo(e.target.value)}
                    placeholder="Digite o nome do reposit√≥rio"
                />
                <button type="submit">Pesquisar</button>
            </Form>

            {/* Cria√ß√£o de um novo componente Error para mostrar o nosso erro. S√≥ que precisamos mostrar a componente Error s√≥ se o inputError tiver algum valor dentro dele. Para o react podemos criar uma forma de if simplificada. Uma if que s√≥ tem o valor da condicional caso ela seja satisfeita(uma if sem o else). */}
            {/* L√™-se: Se a vari√°vel inputError est√° preenchida eu vou colocar/mostrar o nosso erro.*/}
            {inputError && <Error>{inputError}</Error> }

            {/* Criando outro componente estilizado */}
            <Repositories>
                {/* Agora que j√° j√° adionamos o nosso repos√≠t√≥rio na lista, precisamos mostr√°-la na tela. Para isso, vou percorrer todo o meu repositories, e para cada um desses reposit√≥ries eu vor retornar os elementos "a". Lembrando que o 1¬∫ elemento deve ter a "key"*/}
                {repositories.map(repository => (
                    <a key={repository.full_name} href="teste">
                        <img
                            src={repository.owner.avatar_url}
                            alt={repository.owner.login} /* Aqui vamos usar o login do owner */
                        />
                        <div>
                            <strong> {repository.full_name} </strong>
                            <p> {repository.description} </p>
                        </div>

                        {/* instalamos "yarn add react-icons" e importamos "FiChevronRight" acima e:  */}
                        <FiChevronRight size={20} />
                    </a>
                ))}

            </Repositories>
        </>
    );
};

export default Dashboard;
